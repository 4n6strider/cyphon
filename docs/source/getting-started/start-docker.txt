.. _start-docker:

##########################
Starting Docker Containers
##########################

* :ref:`production-environment`
* :ref:`development-environment`
* :ref:`testing-environment`

The project contains several Docker Compose files used for deploying to
development, testing, and production environments:

    * ``docker-compose.yml``: the base configuration for the project
    * ``docker-compose.dev.yml``: configuration for the dev environment
    * ``docker-compose.override.yml``: configuration for the production environment
    * ``docker-compose.travis.yml``: configuration for the testing environment

You can read more about Docker Compose files in Docker's 
`official documentation <https://docs.docker.com/compose/compose-file/>`_.


.. _production-environment:

**********************
Production Environment
**********************

The production environment uses images on Docker Hub as the basis for 
its Cyphon and Cyclops containers. The Cyphon and Cyclops images are 
currently in a private Docker Hub repository, so you will need to log in 
to Docker Hub to use them::

    $ sudo docker login

Settings for the production environment are contained in the 
``docker-compose.override.yml`` file. Docker Compose automatically reads  
both the ``docker-compose.yml`` and ``docker-compose.override.yml`` 
files when it builds an environment, unless other files are specified. 
So in this case, Docker will deploy the production environment by default.

To start up the (default) production environment::

    $ cd /opt/cyphon/cyphondock
    $ sudo docker-compose up -d

Superuser
=========

To create a superuser for the production environment, see the section 
:ref:`create-superuser`.

Ports
=====

The production environment will map the exposed ports in the containers 
to same ports on the host machine. This makes it straightforward to use 
the endpoints of the various services.

You can access Cyphon and some of its related services through your web 
browser. The following services can be accessed by visiting your host 
domain on the appropriate port (e.g., ``http://example.com:8080``):

===================  =====
Service              Port
===================  =====
Cyphon               80
CAdvisor             8080
Kibana               5601
RabbitMQ management  15672
===================  =====

Data Volumes
============

The production environment uses the subdirectories in ``/opt/cyphon/data``
as data volumes for PostgreSQL, Elasticsearch, or MongoDB. This makes
the data from those services easy to locate and backup.


.. _development-environment:

***********************
Development Environment
***********************

Unlike the production environment, the dev environment builds the images
for Cyphon and Cyclops using local files.

Settings for the dev environment are contained in the 
``docker-compose.dev.yml`` file. To use the dev environment, you must 
specify both the base configuration file and the dev configuration file 
when starting the containers::

    $ cd /opt/cyphon/cyphondock
    $ sudo docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

Use the ``-d`` flag if you want to start the containers in the 
background.

Superuser
=========

The dev environment will create a Cyphon superuser using the settings 
in the ``cyphon.env`` file, if that superuser doesn't already exist.

Ports
=====

The dev environment maps the exposed ports in the containers to random 
free ports on the host. This prevents any problems with ports already 
in use on the host. Once the docker containers are running, you can 
list the containers to see which ports on the host are being used for 
the various services::

    $ sudo docker ps -a

For example, the Kibana container exposes port 5601, but that port will 
be mapped to a random port on the host machine. If the port mapping for 
the Kibana container is ``0.0.0.0:32775->5601/tcp``, you would visit 
``http://localhost:32775`` in your web browser to access Kibana.

Data Volumes
============

Unlike the production environment, the dev environment does not assign 
any specific host directories to store data from PostgreSQL, 
Elasticsearch, or MongoDB. Instead, it allows those services to 
automatically configure the locations for their data volumes. This 
prevents any confusion of dev and production data if the production 
environment is used at a later time. See Docker's `documentation <https://docs.docker.com/engine/tutorials/dockervolumes/>`_ to learn more about data volumes.


.. _testing-environment:

*******************
Testing Environment
*******************

Settings for the testing environment are found in ``docker-compose.travis.yml``. 
This file contains the minimum services needed to run the test suite. 
To start the testing environment and run tests::

    $ cd /opt/cyphon/cyphondock
    $ sudo docker-compose -f docker-compose.travis.yml up -d
    $ sudo docker exec cyphondock_cyphon_1 python manage.py test --noinput

.. note:: If you'd like to see more output when running tests, include  
          the ``--verbosity=2`` flag after the ``python manage.py test`` 
          command.
